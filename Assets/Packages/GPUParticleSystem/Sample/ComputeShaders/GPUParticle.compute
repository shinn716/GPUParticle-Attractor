// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
#pragma kernel Emit
#pragma kernel Update

#include "Common.cginc"
#include "SimplexNoise3D.hlsl"

#define THREAD_NUM_X 32
#define EPSILON 1e-3

 struct ParticleData
 {
	bool isActive;      // 有効フラグ
	float3 position;    // 座標
    float3 velocity;    // 加速度
    float4 color;       // 色
    float duration;     // 生存時間
	float scale;        // サイズ
};

float3 curlNoise(float3 coord)
{
	float3 dx = float3(EPSILON, 0.0, 0.0);
	float3 dy = float3(0.0, EPSILON, 0.0);
	float3 dz = float3(0.0, 0.0, EPSILON);
		
	float3 dpdx0 = snoise(coord - dx);
    float3 dpdx1 = snoise(coord + dx);
    float3 dpdy0 = snoise(coord - dy);
    float3 dpdy1 = snoise(coord + dy);
    float3 dpdz0 = snoise(coord - dz);
    float3 dpdz1 = snoise(coord + dz);

    float x = dpdy1.z - dpdy0.z + dpdz1.y - dpdz0.y;
    float y = dpdz1.x - dpdz0.x + dpdx1.z - dpdx0.z;
    float z = dpdx1.y - dpdx0.y + dpdy1.x - dpdy0.x;
	
    return float3(x, y, z) / EPSILON * 2.0;
}

// 乱数生成
inline float rnd(float2 p){
    return frac(sin(dot(p ,float2(12.9898, 78.233))) * 43758.5453);
}

inline float3 rnd3(float2 p){
	return 2.0 * (float3(rnd(p * 1), rnd(p * 2), rnd(p * 3)) - 0.5);
}

float3 hsv_to_rgb(float3 HSV)
{
	float4 k = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(HSV.xxx + k.xyz) * 6.0 - k.www);
	return HSV.z * lerp(k.xxx, clamp(p - k.xxx, 0.0, 1.0), HSV.y);
}

RWStructuredBuffer<ParticleData> _Particles;
AppendStructuredBuffer<uint> _DeadList;
ConsumeStructuredBuffer<uint> _ParticlePool;
AppendStructuredBuffer<uint> _ActiveList;

float3 _EmitPosition;
float _VelocityMax;
float _VelocityMin;
float _DT;
float _Timetime;
float _LifeTime;
float _ScaleMin;
float _ScaleMax;
float _Gravity;
float _Sai;
float _Val;
float _Hue;
float _Alpha;


bool _Attractorst = false;
//float _Range;
float3 _MousePos;
float _Attraction;
float _AttractorGravity;

bool _noise = false;
float convergence;
float viscosity;

bool _mAttractorst = false;
uint _maxnum;
uint _mcount;
float4 _mPos[32];


[numthreads(THREAD_NUM_X, 1, 1)]
void Init (uint3 id : SV_DispatchThreadID)
{
	uint no = id.x;

	_Particles[no].isActive = false;
	_DeadList.Append(no);
}

[numthreads(THREAD_NUM_X, 1, 1)]
void Emit ()
{
	uint no = _ParticlePool.Consume();

	float2 seed = float2(no + _Timetime, no + 1.583 + _Timetime);
	float speed = rnd(seed) * (_VelocityMax - _VelocityMin) + _VelocityMin;
	float scale = (rnd(seed + 3) - 0.5) * 2.0 * (_ScaleMax - _ScaleMin) + _ScaleMin;																	// color

	_Particles[no].isActive = true;
	_Particles[no].position = _EmitPosition;
	_Particles[no].velocity = (rnd3(seed + 3.15)) * speed * (_VelocityMax - _VelocityMin) + _VelocityMin;
	_Particles[no].color = float4(hsv_to_rgb(float3(_Hue, _Sai, _Val)), _DT);
	_Particles[no].duration = _LifeTime;
	_Particles[no].scale = scale;
}

void AttractorBehavior(float3 pos, int count) {
	float3 p = _Particles[count].position;
	float3 v = _Particles[count].velocity * _AttractorGravity;
	float3 to = pos - p;
	float dst = max(0.0001, length(to));
	float3 force = normalize(to) / dst;
	v += force * _Attraction + p * 0.00001;

	_Particles[count].duration -= _DT;
	_Particles[count].color.a = max(_Particles[count].duration / _LifeTime, 0);

	if (_Particles[count].duration <= 0) {
		_Particles[count].duration = abs(Random(count + _Timetime)) * _LifeTime;
		_DeadList.Append(count);
	}
	else {
		_ActiveList.Append(count);
	}

	_Particles[count].position = p + v;
	_Particles[count].velocity = v;
}

[numthreads(THREAD_NUM_X, 1, 1)]
void Update (uint3 id : SV_DispatchThreadID)
{
	uint no = id.x;

	if(!_Attractorst){

		if(_Particles[no].isActive) {
			
			//Noise
			if (viscosity != 0.0f && _noise)
			{
				_Particles[no].velocity += (curlNoise(_Particles[no].position * _DT * convergence) - _Particles[no].velocity) * viscosity * _DT; 
			}


			_Particles[no].velocity.y -= _Gravity * _DT;
			_Particles[no].position += _Particles[no].velocity * _DT;
			_Particles[no].duration -= _DT;
			_Particles[no].color.a = max(_Particles[no].duration / _LifeTime, 0);

			if(_Particles[no].duration <= 0) {
				_Particles[no].isActive = false;
				_DeadList.Append(no);
			}
			else {
				_ActiveList.Append(no);
			}

		}

	}

	//Attractor
	else{
		
		if(_Particles[no].isActive) {
			
			//Multi-Attractor
			if (_mAttractorst) {

				for (int i = 0; i < _mcount; i++) {

					if (no > (_maxnum / _mcount)*i && no <= (_maxnum / _mcount)*(i + 1))
						AttractorBehavior(_mPos[i], no / _mcount);

					else
						AttractorBehavior(_mPos[i], no / _mcount);
				}
			}

			else
				AttractorBehavior(_MousePos, no);

		}

	}
}